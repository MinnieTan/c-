#DLList.h

#ifndef DL_LIST_H
#define DL_LIST_H
#include <iostream>
#include <algorithm>
struct DLNode {
        int data;
        DLNode * next;
        DLNode * prev;
};
class DLList {
        int nElements;
        DLNode * sentinel;
public:
        DLList();
        ~DLList();
        void print();
        void printSorted();
        void insertFront(int data);
        bool removeLast(int & data);
        DLList * difference(DLList & list);
        DLList * getRange(int start, int end);
        DLList * intersection(DLList & list);
        void removeRange(int start, int end);
        /**
         * @brief      This operator does insert front.
         * 
         * Please, please, please do not remove it or change it.
         * This is for testing purposes only.
         *
         * @param[in]  data  Thing to insert front.
         *
         * @return     Returns a reference to this.
         */
        DLList & operator << (int data) {
                this->insertFront(data);
                return *this;
        }
        /**
         * @brief      This operator does subtraction.
         * 
         * Please, please, please do not remove or change this code.
         * This is for testing purposes only.
         *
         * @param      other  List to remove.
         *
         * @return     *this - other
         */
        DLList & operator - (DLList & other) {
                return *difference(other);
        }
private:
        DLNode * head;
};
#endif


#-----------------------
#DLList.cpp

#include "DLList.h"
#include <iostream>
using namespace std;
/**
 * @brief      Constructor for the DLList.
 */
DLList::DLList()
{
        /** @todo Write a constructor for a dllist. Check slides! **/
        sentinel = new DLNode();
        nElements = 0;
        sentinel->next = sentinel;
        sentinel->prev = sentinel;
}
/**
 * @brief      Destructor for the DLList.
 */
DLList::~DLList(){
        /** @todo Clean up your mess! **/
        DLNode *e = sentinel->next;
        while(e!=sentinel){
                DLNode *temp = e;
                e = e->next;
                delete temp;
        }
        delete e;
}
/**      
 * @brief      Print the DLList line by line.
 */      
void DLList::print(){
        /** @todo Print this list line by line **/
        DLNode * e = sentinel->next;
        while(e!=sentinel){
                cout << e->data << endl;
                e = e->next;
        }
}   
/** 
 * @brief      Sort and print the list.
 * 
 * This function should sort and print the list.
 * Note: the actual list is NOT to be modified.
 * In other words, it should only *print* in a
 * sorted order, not actually sort the list.
 */
void DLList::printSorted(){
        /** @todo Print a sorted copy of this list **/
        int datas[nElements];
        DLNode * e = sentinel->next;
        int i = 0;
        while(e!=sentinel){
                datas[i] =  e->data;
                i++;
                e = e->next;
        }
        int temp = 0;
        int a = 0;
        int b = 0;
        for(a = 0; a < nElements; a++){
                for(b = 0; b < nElements-1; b++){
                        if(datas[b]>datas[b+1]){
                                temp = datas[b];
                                datas[b] = datas[b+1];
                                datas[b+1] = temp;
                        }
                }
        }
        for(int j = 0; j < nElements; j++){
                cout << datas[j] << endl;
        }
}
/**
 * @brief      Add to the front of the list.
 *
 * @param[in]  data  Item to add to front.
 */
void DLList::insertFront(int data){
        /** @todo Insert to the front of the list **/
        DLNode * e = new DLNode();
        e->data = data;
        e->next = sentinel->next;
        e->prev = sentinel;
        e->next->prev = e;
        e->prev->next = e;
        nElements++;
}
/**
 * @brief      Removes & stores the last element.
 *
 * The last element is removed and stored in the
 * referenced variable data.
 * 
 * @param      data  Thing in which we are storing the data.
 *
 * @return     True upon successful removal.
 */
bool DLList::removeLast(int & data){
        /** @todo Remove the last thing **/
        DLNode * e = sentinel->prev;
        sentinel->prev = e->prev;
        e->prev->next = sentinel;
        data = e->data;
        delete e;
        return true;
}
/**
 * @brief      Difference of two lists.
 *
 * @param      list  Subtrahend.
 *
 * @return     Returns a pointer to the difference.
 */
DLList * DLList::difference(DLList & list){
        DLList * diff = new DLList();
        /** @todo Implement this function **/
        DLNode *one = sentinel->next;
        DLNode *two = (list.sentinel)->next;
        while(one!=sentinel){
                int same = 0;
                while(two!=list.sentinel){
                        if((one->data)==(two->data)){
                                same = 1;
                                break;
                        }
                        two = two->next;
                }
                two = (list.sentinel)->next;
                if(same==0){
                        diff->insertFront(one->data);
                }
                one = one->next;
        }
        return diff;
}
/**
 * @brief      Returns a sublist of items in a range.
 *
 * @param[in]  start  First index.
 * @param[in]  end    Second index.
 *
 * @return     Elements between first and second index.
 */
DLList * DLList::getRange(int start, int end){
        DLList * range = new DLList();
        /** @todo getRange **/
        DLNode *e = sentinel->next;
        for(int i = 0; i < start; i++){
                e = e->next;
        }
        for(int j = 0; j < end-start; j++){
                range->insertFront(e->data);
                e = e->next;
        }
        return range;
}
/**
 * @brief      Intersection of this list and another list.
 *
 * @param      list  The other list.
 *
 * @return     Elements list shares with this one.
 */
DLList * DLList::intersection(DLList & list){
        DLList * inter = new DLList();
        /** @todo intersection **/
        DLNode *one = sentinel->next;
        DLNode *two = (list.sentinel)->next;
        int array[100];
        int i = 0;
        while(one!=sentinel){
                while(two!=list.sentinel){
                        if((one->data)==(two->data)){
                                array[i] = one->data;
                                i++;
                                break;
                        }
                        two = two->next;
                }
                two = (list.sentinel)->next;
                one = one->next;
        }
        for(int j = i-1; j >=0; j--){
                inter->insertFront(array[j]);
        }
        return  inter;
}
/**
 * @brief      Removes nodes in the start-end range.
 *
 * @param[in]  start  First node.
 * @param[in]  end    Second node.
 */
void DLList::removeRange(int start, int end){
        /** @todo Remove a range of elements **/
        DLNode *one = sentinel->next;
        for(int i = 0; i <= start; i++){
                one = one->next;
        }
        DLNode *two = sentinel->next;
        for(int j = 0; j <= end+1; j++){
                two = two->next;
        }
        while(two!=sentinel){
                one->data = two->data;
                one = one->next;
                two = two->next;
        }
}


#----------------------------------------
#MyString.h

// String Implementation
class MyString {
  // Stores the string in C string format
  char * _s;
 protected:
  // My own implementation of strlen
  int slength(const char *s) const;
  // Initialize _s. Allocate memory for _s and copy s into _s
  void initialize(const char * s);
 public:
  // Create a MyString from a C string
  MyString(const char * s);
  // Create a MyString from a copy of another string
  MyString(const MyString &s);
  // Create a MyString with an empty string
  MyString();
  // Assignment operator. Without this operator the assignment is
  // just a shallow copy that will copy the pointer _s. If the original _s
  // goes away then the assigned _s will be a dangling reference.
  MyString & operator = (const MyString & other);
  // Obtain a substring of at most n chars starting at location i
  // if i is larger than the length of the string return an empty string.
  MyString substring(int i, int n);
  // Remove at most n chars starting at location i
  void remove(int i, int n);
  // Return true if strings "this" and s are equal
  bool operator == (const MyString &s);
  // Return true if strings "this" and s are not equal
  bool operator != (const MyString &s);
  // Return true if string "this" is less or equal to s
  bool operator <= (const MyString &s);
  // Return true if string "this" is greater than s
  bool operator > (const MyString &s);
  // Return character at position i. Return '\0' if out of bounds.
  char operator [](int i);
  // Return C representation of string
  const char * cStr();
  // Get string length of this string.
  int length() const;
  // Destructor. Deallocate the space used by _s
  ~MyString();
  // Needed to allow the operator + to use the MyString member variables.
  friend MyString operator + (const MyString &s1, const MyString &s2);
};
// Concatanate two strings (non member method)
MyString operator + (const MyString &s1, const MyString &s2);


#----------------------------------------
#MyString.cpp

// String Implementation
// IMPORTANT: Do not use any of the functions in the string C runtime library
// Example. Do not use strcpy, strcmp, etc. Implement your own
// IMPORTANT: See the MyString.h file for a description of
// what each method needs to do.
#include <stdio.h>
#include "MyString.h"
// My own implementation of strlen
int MyString::slength(const char *s) const {
  // Add implementation here
  int len = 0;
  while(s[len]!='\0'){
        len++;
  }
  return len;
}
// Initialize _s. Allocate memory for _s and copy s into _s
void MyString::initialize(const char * s){
  // Add implementation here
  // Allocate memory for _s.
  int len = slength(s);
  _s = new char[len+1];
  // Copy s into _s
  int i = 0;
  while(s[i]!='\0'){
        _s[i] = s[i];
        i++;
  }
  _s[len] = '\0';
}
// Create a MyString from a C string
MyString::MyString(const char * s){
  initialize(s);
}
// Create a MyString from a copy of another string
MyString::MyString(const MyString &s) {
  initialize(s._s);
}
// Create a MyString with an empty string
MyString::MyString() {
  _s = new char[1];
  *_s = 0;
}
// Assignment operator. Without this operator the assignment is
// just a shallow copy that will copy the pointer _s. If the original _s
// goes away then the assigned _s will be a dangling reference.
MyString & MyString::operator = (const MyString & other) {
  if (this != &other) // protect against invalid self-assignment  {
    // deallocate old memory
    delete [] _s;
    // Initialize _s with the "other" object.
    initialize(other._s);
    // by convention, always return *this
    return *this;
  }
}
// Obtain a substring of at most n chars starting at location i
// if i is larger than the length of the string return an empty string.
MyString MyString::substring(int i, int n) {
  // Add implementation here
  // Make sure that i is not beyond the end of string
  int len = slength(this->_s);
  if(i>len){
        return MyString();
  }
  // Allocate memory for substring
  MyString sub;
  // Copy characters of substring
  int k = 0;
  for(int j = i; j <= (n+2); j++){
        if((this->_s)[j]!='\0'){
                if((this->_s)[j]!=' '){
                        (sub._s)[k] = (this->_s)[j];
                        k++;
                }
        }else{
                break;
        }
  }
  (sub._s)[k] = '\0';
  // Return substring
  return sub;
}
// Remove at most n chars starting at location i
void MyString::remove(int i, int n) {
  // Add implementation here
  // If i is beyond the end of string return
  int len = slength(this->_s);
  if(i>len){
        return;
  }
  // If i+n is beyond the end trunc string
  int beyond = 0;
  if((i+n)>len-1){
        beyond = 1;
  }
  // Remove characters
  if(beyond==0){
        int k = i;
        int l = 0;
        for(int j = i+n; j < len; j++){
                (this->_s)[k+l] = (this->_s)[j];
                l++;
        }
        (this->_s)[k+l] = '\0';
  }else if(beyond==1){
        (this->_s)[i] = '\0';
  }
}
// Return true if strings "this" and s are equal
bool MyString::operator == (const MyString & s) {
  // Add implementation here
  int thisLen = slength(this->_s);
  int sLen = slength(s._s);
  if(thisLen!=sLen){
        return false;
  }else{
        for(int i = 0; i < thisLen; i++){
                if((this->_s)[i]!=(s._s)[i]){
                        return false;
                }
        }
  }
  return true;
}
// Return true if strings "this" and s are not equal
bool MyString::operator != (const MyString &s) {
  // Add implementation here
  int thisLen = slength(this->_s);
  int sLen = slength(s._s);
  if(thisLen==sLen){
        int same = 0;
        for(int i = 0; i < thisLen; i++){
                if((this->_s)[i]==(s._s)[i]){
                        same++;
                }else{
                        break;
                }
        }
        if(same==thisLen){
                return false;
        }else{
                return true;
        }
  }else{
        return true;
  }
  return false;
}
// Return true if string "this" and s is less or equal
bool MyString::operator <= (const MyString &s) {
  // Add implementation here
  if(((this->_s)[0]-(s._s)[0])<0){
        return true;
  }else if(((this->_s)[0]-(s._s)[0])>0){
        return false;
  }else{
        int i = 0;
        while((this->_s)[i]!='\0'){
                if((s._s)[i]=='\0'){
                        return false;
                }
                if(((this->_s)[i]-(s._s)[i])>0){
                        return false;
                }
                i++;
        }
        return true;
  }
}
// Return true if string "this" is greater than s
bool MyString::operator > (const MyString &s) {
  // Add implementation here
  int thisLen = slength(this->_s);
  int sLen = slength(s._s);
  int shorter = thisLen;
  if(sLen < thisLen){
        shorter = sLen;
  }
  for(int i = 0; i < shorter; i++){
        if((this->_s)[i]<=(s._s)[i]){
                return false;
        }
  }
  return true;
}
// Return character at position i.  Return '\0' if out of bounds.
char MyString::operator [] (int i) {
  // Add implementation here
  int thisLen = slength(this->_s);
  if(i>=thisLen){
        return '\0';
  }else{
        return  *((this->_s)+i);
  }
}
// Return C representation of string
const char * MyString::cStr() {
  return _s;
}
// Get string length of this string.
int MyString::length() const {
  return slength(_s);
}
// Destructor. Deallocate the space used by _s
MyString::~MyString() {
  delete [] _s;
}
// Concatanate two strings (non member method)
MyString operator + (const MyString &s1, const MyString &s2) {
  // Add implementation here
  // Allocate memory for the concatenated string
  int s1Len = s1.length();
  int s2Len = s2.length();
  char *concatenated = new char[s1Len+s2Len+1];
  // Add s1
  for(int i = 0; i < s1Len; i++){
        concatenated[i] = (s1._s[i]);
  }
  // Add s2
  int k = 0;
  for(int j = s1Len; j < s1Len+s2Len+1; j++){
        concatenated[j] = (s2._s[k]);
        k++;
  }
  concatenated[s1Len+s2Len] = '\0';
  MyString s(concatenated);
  return s;
}


#---------------
#Stack.h

// Make sure that this file is included only once
#ifndef Stack_h
#define Stack_h
// Definition of a Stack class to store double values
class Stack {
 private:
        int maxStack;   // Max number of elements
        int top;        // Index to top of the stack
        double * stack; // Stack array
 public:
        // Constructor
        Stack(int maxStack);
        // Push a value into the stack.
        // Return false if max is reached.
        bool push(double value);
        // Pop a value from the stack.
        // Return false if stack is empty
        bool pop(double & value);
        // Return number of values in the stack
        int getTop() const;
        // Return max number of values in stack
        int getMaxStack() const;
        // Prints the stack contents
        void print() const;
  // Destructor
  ~Stack();
};

#endif


#---------------
#Stack.cpp

// Stack Implementation 
// Used for cout << "string"
#include <iostream>
using namespace std;
#include "Stack.h"
// Constructor
Stack::Stack(int maxStack) {
        this->maxStack = maxStack;
        stack = new double[maxStack];
        top = 0;
}
// Write other calls here
// Push a value into the stack.
// Return false if max is reached.
bool Stack::push(double value){
        if(top==maxStack){
                return false;
        }
        stack[top] = value;
        top++;
        return true;
}
// Pop a value from the stack.
// Return false if stack is empty
bool Stack::pop(double & value){
        if(top==0){
                return false;
        }
        top--;
        value = stack[top];
        return true;
}
// Return number of values in the stack
int Stack::getTop() const{
        return top;
}
// Return max number of values in stack
int Stack::getMaxStack() const{
        return maxStack;
}
// Prints the stack contents
void Stack::print() const{
        cout << "Stack:" << endl;
        if(top==0){
                cout << "Empty" << endl;
        }
        for(int i = 0; i < top; i++){
                cout << i << ":" << stack[i] << endl;
        }
        cout << "------" << endl;
} 
// Destructor
Stack::~Stack(){
        delete [] stack;
}
