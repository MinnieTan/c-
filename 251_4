#gethtml.cpp

#include <iostream>
#include "SimpleHTMLParser.h"
using namespace std;
// Example program to demonstrate using SimpleHTMLParser.
void printUsage() {
        cerr << "  Usage: gethtml [-h|-t|-a] url" << endl;
        cerr << "  Example: gethtml https://www.cs.purdue.edu" << endl;
}
int main( int argc, char ** argv ) {
        string option;
        string url;
        if (argc == 1) {
                printUsage();
                exit(1);
        } else if (argc == 2) {
                option = "";
                url = string(argv[1]);
        } else {
                option = string(argv[1]);
                url = string(argv[2]);
        }
        if (option == "-h") {
                printUsage();
                exit(1);
        }
        // Create a parsing context
        SimpleHTMLParser parser;
        // Attempt to parse a url
        if (!parser.parse(url)) {
                // Print the error if parsing failed
                cerr << parser.errmsg() << endl;
                exit(1);
        }
        if (option == "") {
                // No options, output raw HTML
                cout << parser.getHTML() << endl;
        } else if (option == "-t") {
                // Output text (with tags removed)
                cout << parser.getText() << endl;
        } else if (option == "-a") {
                // Get a list of URLs embedded in the HTML file
                vector<string> urls = parser.getUrls();
                // Print each URL
                for (auto& u : urls)
                        cout << u << endl;
        }
        return 0;
}


#--------------------
#Node.h

ifndef NODE_H
#define NODE_H
#include <iostream>
using namespace std;
enum color {RED, BLACK};
template <typename Key, typename Element>
class Node {
private:
        // Add class members here
        color hue;
        Node<Key, Element> * parent;
        Node<Key, Element> * left;
        Node<Key, Element> * right;
        Key key;
        Element element;
public:
        // Implement each of these methods
        Node() {
                this->hue = RED;
                this->parent = NULL;
                this->left = NULL;
                this->right = NULL;
        }
        // These implementations are only to get the skeleton
        // code to compile. Ignore the warnings they generate
        // until you replace their implementations with your own
        const Key& getKey() const {
                return this->key;
        }
        const Element& getElement() const {
                return this->element;
        }
        Element& getElement() {
                return this->element;
        }
        color getColor() const {
                return this->hue;
        }
        Node* getParent() {
                return this->parent;
        }
        Node* getLeft() {
                return this->left;
        }
        Node* getRight() {
                return this->right;
        }
        void setKey(const Key& k) {
                this->key = k;
        }
        void setElement(const Element& e) {
                this->element = e;
        }
        void setColor(color c) {
                this->hue = c;
        }
        void setLeft(Node<Key, Element> * n){
                this->left = n;
        }
        void setRight(Node<Key, Element> * n){
                this->right = n;
        }
        void setParent(Node<Key, Element> * n){
                this->parent = n;
        }
        bool isLeaf(){
                if(((this->left)==NULL)&&((this->right)==NULL)){
                        return true;
                }else{
                        return false;
                }
        }
        Node<Key, Element>* getSibling(Node<Key, Element> * n){
                Node<Key, Element> * p = n->getParent();
                if(p==NULL){
                        return NULL;
                }
                if(n==p->getLeft()){
                        return p->getRight();
                }else{
                        return p->getLeft();
                }
        }
        Node<Key, Element>* getUncle(){
                Node<Key, Element> * p = this->parent;
                Node<Key, Element> * gP = p->getParent();
                if(gP==NULL){
                        return NULL;
                }
                return getSibling(p);
        }
};
// The following functions have been provided for you, and do not
// need to be modified:
// Output stream operator overload -- writes the contents of a
// Node to the specified output stream. Note that there must be
// a similar operator overload for Key and Element types in
// order for this to compile.
// Example usage:
//              Node<K,E> n;
//              cout << n << endl;
template <typename Key, typename Element>
ostream& operator<<(ostream& out, const Node<Key, Element>& n) {
        out << n.getKey() << endl;
        out << n.getElement() << endl;
        return out;
}
// Input stream operator overload -- reads the contents of a
// Node from the specified input stream. Note that there must be
// a similar operator overload for Key and Element types in order
// for this to compile.
// Example usage:
//              Node<K,E> n;
//              cin >> n;
template <typename Key, typename Element>
istream& operator>>(istream& in, Node<Key, Element>& n) {
        // Clear existing contents, if any
        n = Node<Key, Element>();
        Key k;
        in >> k;
        Element e;
        in >> e;
        n.setKey(k);
        n.setElement(e);
        return in;
}
#endif


#---------------------------
#RBTree.h

#ifndef PROJ4_RBTREE_H
#define PROJ4_RBTREE_H
#include "Node.h"
#include <iostream>
using namespace std;
#include <vector>
template <typename Key, typename Element>
class RBTree {
private:
        // Add class members here
        Node<Key, Element>* root;
        size_t s;
public:
        // Implement each of these methods
    RBTree() {
        this->root = NULL;
        this->s = 0;
    }
    void insert(const Key& k, const Element& e);
    Node<Key, Element>* search(const Key& k);
    void del(const Key& k);
    void inorder(ostream& out) const;
    void levelOrder(ostream& out) const;
    size_t size() const;
    Node<Key, Element>* getRoot() const;
    void recursivelyInsert(Node<Key, Element> * r, Node<Key, Element> * p);
    void rotateLeft(Node<Key, Element> * p);
    void rotateRight(Node<Key, Element> * p);
    void recolor(Node<Key, Element> * p);
    Node<Key, Element>* match(Node<Key, Element> * p, const Key& k);
    void traverse(ostream& out, Node<Key, Element> * p) const;
    void printSpecificLevel(ostream& out, Node<Key, Element>* n, int level) const;
};
//recursively insert
template <typename Key, typename Element>
void RBTree<Key, Element>::recursivelyInsert(Node<Key, Element> * r, Node<Key, Element> * p){
        Key pK = p->getKey();
        Key rK = r->getKey();
        //whether pK < rK
        if((r!=NULL)&&(pK<rK)){
                Node<Key, Element> * rL = r->getLeft();
                if(rL==NULL){
                        r->setLeft(p);
                }else if(rL!=NULL){
                        r = r->getLeft();
                        recursivelyInsert(r, p);
                        return;
                }
        }else if(r!=NULL){
                Node<Key, Element> * rR = r->getRight();
                if(rR==NULL){
                        r->setRight(p);
                }else if(rR!=NULL){
                        r = r->getRight();
                        recursivelyInsert(r, p);
                        return;
                }
        }
        p->setParent(r);
}
//rotate left
template <typename Key, typename Element>
void RBTree<Key, Element>::rotateLeft(Node<Key, Element> * p){
        Node<Key, Element> * n = p->getRight();
        p->setRight(n->getLeft());
        n->setLeft(p);
        n->setParent(p->getParent());
        p->setParent(n);
}
//rotate right
template <typename Key, typename Element>
void RBTree<Key, Element>::rotateRight(Node<Key, Element> * p){
        Node<Key, Element> * n = p->getLeft();
        p->setLeft(n->getRight());
        n->setRight(p);
        n->setParent(p->getParent());
        p->setParent(n);
}
//recolor the RBTree
template <typename Key, typename Element>
void RBTree<Key, Element>::recolor(Node<Key, Element> * p){
        Node<Key, Element> * pP = p->getParent();
        Node<Key, Element> * pU = p->getUncle();
        if(pP==NULL){
                color b = BLACK;
                p->setColor(b);
        }else if((pP->getColor())==BLACK){
        }else if(pU==NULL){
                Node<Key, Element> * pGp = pP->getParent();
        }else{
                if((pU->getColor())==RED){
                color b = BLACK;
                pP->setColor(b);
                (p->getUncle())->setColor(b);
                color r = RED;
                Node<Key, Element> * pGp = pP->getParent();
                        if(pGp!=(this->root)){
                                pGp->setColor(r);
                                recolor(pGp);
                        }
                }else{
                        Node<Key, Element> * pGp = pP->getParent();
                        Node<Key, Element> * pGpL = pGp->getLeft();
                        Node<Key, Element> * pGpR = pGp->getRight();
                        if(p==pGpL->getRight()){
                                rotateLeft(p->getParent());
                                p = p->getRight();
                        }else if(p==pGpR->getLeft()){
                                rotateRight(p->getParent());
                                p = p->getRight();
                        }
                        if(p==pP->getLeft()){
                                rotateRight(pGp);
                        }else{
                                rotateLeft(pGp);
                        }
                        color b = BLACK;
                        color r = RED;
                        pP->setColor(b);
                        pGp->setColor(r);
                }
        }
}
// Function to insert a new node with given data
template <typename Key, typename Element>
void RBTree<Key, Element>::insert(const Key& k, const Element& e) {
        Node<Key, Element> * n = new Node<Key, Element>();
        n->setKey(k);
        n->setElement(e);
        this->s++;
        if((this->s)==1){
                this->root = n;
        }else if((this->s)>1){
                recursivelyInsert(this->root, n);
        }
        recolor(n);
}
//match keys
template <typename Key, typename Element>
Node<Key, Element>* RBTree<Key, Element>::match(Node<Key, Element> * p, const Key& k){
        Key pK = p->getKey();
        if(pK==k){
                return p;
        }else if(pK<k){
                p = p->getRight();
                match(p, k);
        }else if(pK>k){
                p = p->getLeft();
                match(p, k);
        }
}
// Function to search a node with given data
template <typename Key, typename Element>
Node<Key, Element>* RBTree<Key, Element>::search(const Key& k) {
        match(this->root, k);
}
// Function to delete a node with given data
template <typename Key, typename Element>
void RBTree<Key, Element>::del(const Key& k) {}
//traverse through the tree
template <typename Key, typename Element>
void RBTree<Key, Element>::traverse(ostream& out, Node<Key, Element> * p) const{
        if(p==NULL){
                return;
        }else{
                if((p->getLeft())!=NULL){
                        traverse(out, p->getLeft());
                }
                out << *p;
                if((p->getRight())!=NULL){
                        traverse(out, p->getRight());
                }
                return;
        }
}
// Function to do inorder traversal
template <typename Key, typename Element>
void RBTree<Key, Element>::inorder(ostream& out) const {
        Node<Key, Element> * r = getRoot();
        traverse(out, r);
}
//print nodes at a specific level
template <typename Key, typename Element>
void RBTree<Key, Element>::printSpecificLevel(ostream& out, Node<Key, Element>* n, int l) const{
        if(n!=NULL){
                if(l==1){
                        out << *n;
                }else if(l>1){
                        printSpecificLevel(out, n->getLeft(), l-1);
                        printSpecificLevel(out, n->getRight(), l-1);
                }
        }
}
// Function to perform level-order traversal
template <typename Key, typename Element>
void RBTree<Key, Element>::levelOrder(ostream& out) const {
        int height = log2(this->s);
        for(int i = 1; i <=height; i++){
                printSpecificLevel(out, this->root, i);
        }
}
// Function to return the number of nodes in the RBTree
template <typename Key, typename Element>
size_t RBTree<Key, Element>::size() const {
        return this->s;
}
// Function to return a pointer to the root of the RBTree
template <typename Key, typename Element>
Node<Key, Element>* RBTree<Key, Element>::getRoot() const {
        return this->root;
}
// The following functions have been provided for you, and do not
// need to be modified:
// Output stream operator overload -- writes the contents of the
// entire RBTree to the specified output stream, using an in-order
// traversal. Note that there must be a similar operator overload
// for Key and Element types in order for this to compile.
// Example usage:
//              RBTree<K,E> rbt;
//              cout << rbt << endl;
template <typename Key, typename Element>
ostream& operator<<(ostream& out, const RBTree<Key, Element>& rbtree) {
        out << rbtree.size() << endl;
        rbtree.inorder(out);
        return out;
}
// Input stream operator overload -- reads the contents of an RBTree
// from the specified input stream, inserting each Node as it is
// read. Note that there must be a similar operator overload for Key
// and Element types in order for this to compile.
// Example usage:
//              RBTree<K,E> rbt;
//              cin >> rbt;
template <typename Key, typename Element>
istream& operator>>(istream& in, RBTree<Key, Element>& rbtree) {
        // Clear existing contents, if any
        rbtree = RBTree<Key, Element>();
        // Read in the number of elements to read
        size_t size;
        in >> size;
        for (size_t i = 0; i < size; i++) {
                // Read in each node as it appears in the stream
                Node<Key, Element> n;
                in >> n;
                // Insert the node into the RBTree
                rbtree.insert(n.getKey(), n.getElement());
        }
        return in;
}
#endif //PROJ4_RBTREE_H


#-------------------------
#scan.cpp

#include <iostream>
#include <vector>
using namespace std;
#include "Node.h"
#include "RBTree.h"
// Output stream operator overload for node elements
ostream& operator<<(ostream& out, const vector<pair<string, int>>& e);
int main(int argc, char** argv) {
        // Implement your scan code here

        return 0;
}
// This function overloads the output stream operator for Node
// elements. It has been provided to you and does not need to be
// altered.
ostream& operator<<(ostream& out, const vector<pair<string, int>>& e) {
        // Write the number of elements in the vector
        out << e.size() << endl;
        for (auto& uf : e)
                // Write each member of each pair the vector stores
                out << uf.first << " " << uf.second << endl;
        return out;
}


#----------------------
#search.cpp

#include <iostream>
#include <vector>
using namespace std;
// Input stream operator overload for node elements
istream& operator>>(istream& in, vector<pair<string, int>>& e);
int main(int argc, char** argv) {
        // Implement your search code here
        return 0;
}
// This function overloads the input stream operator for Node
// elements. It has been provided to you and does not need to be
// altered.
istream& operator>>(istream& in, vector<pair<string, int>>& e) {
        // Clear any existing contents
        e.clear();
        // Read the number of elements
        size_t n;
        in >> n;
        for (int i = 0; i < n; i++) {
                // Read each member of each pair the vector stores
                string u;
                in >> u;
                int f;
                in >> f;
                // Add to vector
                e.push_back(make_pair(u, f));
        }
        return in;
}
