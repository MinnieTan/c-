#expr_eval.h

ifndef EXPR_EVAL_H
#define EXPR_EVAL_H
#include <string>
#include "mystack.h"
using namespace std;
class expr_eval{
  private:
        // Declare which ever necessary variables and methods
  public:
        mystack<char> opStk;
        mystack<double> valStk;
        double eval(string, double);
        void doOp();
        void repeatOps(char);
        int prec(char);
        bool isNumber(string);
};
#endif


#----------------------------------------
#expr_eval_main.cpp

#include <iostream>
#include <string>
#include "expr_eval.h"
#include "mystack.h"
#include <stdio.h>
#include <math.h>
#define PI 3.141592653
using namespace std;
int expr_eval::prec(char operation){
        if((operation=='(')||(operation==')')){
                return 0;
        }else if((operation=='+')||(operation=='-')){
                return 1;
        }else if((operation=='*')||(operation=='/')){
                return 2;
        }else if(operation=='^'){
                return 3;
        }else if((operation=='s')||(operation=='c')||(operation=='t')){
                return 4;
        }else if(operation=='l'){
                return 5;
        }else if(operation=='$'){
                return 6;
        }
}
void expr_eval::doOp(){
        double x = this->valStk.pop();
        char operation = this->opStk.pop();
        double result;
        if(operation=='+'){
                double y = (this->valStk).pop();
                result = y+x;
        }else if(operation=='-'){
                double y = (this->valStk).pop();
                result = y-x;
        }else if(operation=='*'){
                double y = (this->valStk).pop();
                result = y*x;
        }else if(operation=='/'){
                double y = (this->valStk).pop();
                result = y/x;
        }else if(operation=='^'){
                double y = (this->valStk).pop();
                result = pow(y, x);
        }else if(operation=='s'){
                result = sin(x*PI/180);
        }else if(operation=='c'){
                result = cos(x*PI/180);
        }else if(operation=='t'){
                result = tan(x*PI/180);
        }else if(operation=='l'){
                result = log10(x);
        }
        (this->valStk).push(result);
}
void expr_eval::repeatOps(char operation){
        if(operation=='$'){
                while(((this->valStk).size()>1)||((this->opStk).size()>0)){
                        doOp();
                }
        }else if(operation=='('){
                return;
        }else if(operation==')'){
                while((this->opStk).top()!='('){
                        doOp();
                }
                (this->opStk).pop();
                return;
        }
        while(((this->valStk).size()>1)&&(prec(operation)<=prec((this->opStk).top()))){
                doOp();
        }
}
double expr_eval::eval(string expression, double xVal){
        int exprLen = expression.length();
        for(int i = 0; i < exprLen; i++){
                if(((expression.at(i))<='9')&&((expression.at(i))>='0')){
                        char temp[10];
                        int j = 0;
                        while((i<exprLen)&&((expression.at(i))>='0')&&(expression.at(i)<='9')){
                                temp[j] = expression.at(i);
                                i++;
                                j++;
                        }
                        i--;
                        temp[j] = '\0';
                        double num =1.00*atoi(temp);
                        (this->valStk).push(num);
                }else if(expression.at(i)=='x'){
                        (this->valStk).push(xVal);
                }else{
                        char temp;
                        if((expression.at(i)=='s')||(expression.at(i)=='c')||(expression.at(i)=='t')||(expression.at(i)=='l')){
                                temp = expression.at(i);
                                i = i+2;
                        }else{
                                temp = expression.at(i);
                        }
                        repeatOps(temp);
                        if(temp!=')'){
                                opStk.push(temp);
                        }
                }
        }
        repeatOps('$');
        double yay = valStk.top();
        valStk.pop();
        return yay;
}
int main(){
        expr_eval obj;
        string expression;
        while(cin >> expression){
                int exprLen = expression.length();
                double xVal = 0.00;
                int index = expression.find('x');
                if(index>=0){
                        cin >> xVal;
                }
                double p = obj.eval(expression, xVal);
                cout << p << endl;
        }
        cout << '\n';
        return 0;
}


#------------------------
#myqueue.h

#ifndef MYQUEUE_H
#define MYQUEUE_H
#define MAX_SIZE 10000
template <class T>
class myqueue{
  private:
        // Declare necessary variables and methods
        T * queue; //queue array
        int start; //the index of the front element in the queue
        int rear; //the index of the rear element in the queue
        int count; //size of the queue
  public:
        myqueue();
        void enqueue(T x);
        T front();
        T dequeue();
        bool empty();
        int size();
};
#endif


#------------------------------
#queue_main.cpp

#include<iostream>
#include "myqueue.h"
using namespace std;
template <class T>
myqueue<T>::myqueue(){
        this->start = 0;
        this->rear = 0;
        this->count = 0;
        queue = new T[MAX_SIZE];
}
template <class T>
void myqueue<T>::enqueue(T x){
        if((this->count)!=MAX_SIZE){
                queue[this->rear] = x;
                this->rear++;
                this->count++;
        }
}
template <class T>
T myqueue<T>::front(){
        cout << queue[this->start] << endl;
        return queue[this->start];
}
template <class T>
T myqueue<T>::dequeue(){
        T y = queue[this->start];
        cout << queue[this->start] << endl;
        this->start++;
        this->count--;
        return y;
}
template <class T>
bool myqueue<T>::empty(){
        if((this->count)==0){
                cout << "1" << endl;
                return true;
        }else{
                cout << "0" << endl;
                return false;
        }
}
template <class T>
int myqueue<T>::size(){
        cout << this->count << endl;
        return this->count;
}
int main(){
        string type;
        cin >> type;
        if(type.compare("int")==0){
                myqueue<int> obj;
                string operation;
                while(cin >> operation){
                        if(operation.compare("enqueue")==0){
                                int c;
                                cin >> c;
                                obj.enqueue(c);
                        }else if(operation.compare("front")==0){
                                obj.front();
                        }else if(operation.compare("dequeue")==0){
                                obj.dequeue();
                        }else if(operation.compare("empty")==0){
                                obj.empty();
                        }else if(operation.compare("size")==0){
                                obj.size();
                        }
                }
        }else if(type.compare("double")==0){
                myqueue<double> obj;
                string operation;
                while(cin >> operation){
                        if(operation.compare("enqueue")==0){
                                double c;
                                cin >> c;
                                obj.enqueue(c);
                        }else if(operation.compare("front")==0){
                                obj.front();
                        }else if(operation.compare("dequeue")==0){
                                obj.dequeue();
                        }else if(operation.compare("empty")==0){
                                obj.empty();
                        }else if(operation.compare("size")==0){
                                obj.size();
                        }
                }
        }else if(type.compare("char")==0){
                myqueue<char> obj;
                string operation;
                while(cin >> operation){
                        if(operation.compare("enqueue")==0){
                                char c;
                                cin >> c;
                                obj.enqueue(c);
                        }else if(operation.compare("front")==0){
                                obj.front();
                        }else if(operation.compare("dequeue")==0){
                                obj.dequeue();
                        }else if(operation.compare("empty")==0){
                                obj.empty();
                        }else if(operation.compare("size")==0){
                                obj.size();
                        }
                }
        }else if(type.compare("string")==0){
                myqueue<string> obj;
                string operation;
                while(cin >> operation){
                        if(operation.compare("enqueue")==0){
                                string c;
                                cin >> c;
                                obj.enqueue(c);
                        }else if(operation.compare("front")==0){
                                obj.front();
                        }else if(operation.compare("dequeue")==0){
                                obj.dequeue();
                        }else if(operation.compare("empty")==0){
                                obj.empty();
                        }else if(operation.compare("size")==0){
                                obj.size();
                        }
                }
        }
        cout << '\n';
        return 0;
}


#------------------------------
#mystack.h

#ifndef MYSTACK_H
#define MYSTACK_H
#define MAX_SIZE 10000
template <class T>
class mystack{
  private:
        // Declare necessary variables and methods
        int topIndex; //Index of top of the stack
        T * stack; //stack array
  public:
        mystack();
        void push(T x);
        T top();
        T pop();
        bool empty();
        int size();
};
template <class T>
mystack<T>::mystack() {
        this->topIndex = 0;
        stack = new T[MAX_SIZE];
}
template <class T>
void mystack<T>::push(T x){
        if((this->topIndex)!=MAX_SIZE){
                stack[this->topIndex] = x;
                this->topIndex++;
        }
}
template <class T>
T mystack<T>::top(){
        return stack[this->topIndex-1];
}
template <class T>
T mystack<T>::pop(){
        if((this->topIndex)>0){
                topIndex--;
                return stack[this->topIndex];
        }
}
template <class T>
bool mystack<T>::empty(){
        if((this->topIndex)==0){
                return true;
        }else{
                return false;
        }
}
template <class T>
int mystack<T>::size(){
        return this->topIndex;
}
#endif


#---------------------------------
#stack_main.cpp

#include <iostream>
#include "mystack.h"
#include<string>
using namespace std;
int main(){
        string type;
        cin >> type;
        if(type.compare("int")==0){
                mystack<int> obj;
                string operation;
                while(cin >> operation){
                        if(operation.compare("push")==0){
                                int c;
                                cin >> c;
                                obj.push(c);
                        }else if(operation.compare("top")==0){
                                cout << obj.top() << endl;
                        }else if(operation.compare("pop")==0){
                                cout << obj.pop() << endl;
                        }else if(operation.compare("empty")==0){
                                if(obj.empty()){
                                        cout << "1" << endl;
                                }else{
                                        cout << "0" << endl;
                                }
                        }else if(operation.compare("size")==0){
                                cout << obj.size() << endl;
                        }
                }
        }else if(type.compare("double")==0){
                mystack<double> obj;
                string operation;
                while(cin >> operation){
                        if(operation.compare("push")==0){
                                double c;
                                cin >> c;
                                obj.push(c);
                        }else if(operation.compare("top")==0){
                                cout << obj.top() << endl;
                        }else if(operation.compare("pop")==0){
                                cout << obj.pop() << endl;
                        }else if(operation.compare("empty")==0){
                                if(obj.empty()){
                                        cout << "1" << endl;
                                }else{
                                        cout << "0" << endl;
                                }

                        }else if(operation.compare("size")==0){
                                cout << obj.size() << endl;
                        }
                }
        }else if(type.compare("char")==0){
                mystack<char> obj;
                string operation;
                while(cin >> operation){
                        if(operation.compare("push")==0){
                                char c;
                                cin >> c;
                                obj.push(c);
                        }else if(operation.compare("top")==0){
                                cout << obj.top() << endl;
                        }else if(operation.compare("pop")==0){
                                cout<< obj.pop() << endl;
                        }else if(operation.compare("empty")==0){
                                if(obj.empty()){
                                        cout << "1" << endl;
                                }else{
                                        cout << "0" << endl;
                                }
                        }else if(operation.compare("size")==0){
                                cout << obj.size() << endl;
                        }
                }
        }else if(type.compare("string")==0){
                mystack<string> obj;
                string operation;
                while(cin >> operation){
                        if(operation.compare("push")==0){
                                string c;
                                cin >> c;
                                obj.push(c);
                        }else if(operation.compare("top")==0){
                                cout << obj.top() << endl;
                        }else if(operation.compare("pop")==0){
                                cout << obj.pop() << endl;
                        }else if(operation.compare("empty")==0){
                                if(obj.empty()){
                                        cout << "1" << endl;
                                }else{
                                        cout << "0" << endl;
                                }
                        }else if(operation.compare("size")==0){
                                cout << obj.size() << endl;
                        }
                }
        }
        cout << '\n';
        return 0;
}

